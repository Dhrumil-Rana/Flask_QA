
create table users(
	id int NOT NULL AUTO_INCREMENT,
	username varchar(20) not null,
	password varchar(20) not null,
	userlevel varchar(10) not null,
	primary key(id)
);

INSERT INTO public.accounts(
	username, password, role)
	VALUES ('user', '123', 'U');

INSERT INTO public.accounts(
	username, password, role)
	VALUES ('admin', 'admin', 'A');

create table posts(
    postID int PRIMARY KEY AUTO INCREMENT,
    userID int NOT NULL,
    image LargeBinary,
    text varchar(100)
    FOREGIN KEY(userID REFERENCES users(id)
);

create table comments(
    commentID int PRIMARY KEY AUTO INCREMENT,
    commenterID int NOT NULL,
    textComment varchar(100)
);

create table friends(
    userID int NOT NULL,
    friendID int NOT NULL
);

create table messages(
    msgID PRIMARY KEY AUTO INCREMENT,
    senderID int NOT NULL,
    reciverID int NOT NULL,
    msg varchar(100) NOT NULL
);


#This is for the app.py models

class accounts(db.Model):
    __tablename__ = 'accounts'
    userID = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.VARCHAR(), unique=True)
    password = db.Column(db.VARCHAR(), unique=False)
    role = db.Column(db.CHAR(1))

    def __init__(self, username, password, role):
        self.username = username
        self.password = password
        self.role = role


class posts(db.Model):
    __tablename__ = 'posts'
    postID = db.column(db.Integer, primary_key=True)
    uID = db.column(db.Integer, db.ForeignKey('accounts.userID'), nullabel=False, on_delete=models.CASCADE)
    image = db.column(db.LargeBinary, nullable=True)
    rendered_image = db.column(db.Text, nullable=True)
    comID = db.column(db.Integer, db.ForeignKey('comments.commentID'), nullable=False, on_delete=models.CASCADE)

    def __init__(self, postID, uID, image, rendered_image, comID):
        self.postID = postID
        self.uID = uID
        self.image = image
        self.rendered_image = rendered_image
        self.comID = comID

class comments(db.Model):
    __tablename__ = 'comments'
    commentID = db.column(db.Integer, primary_key=True)
    commenterID = db.column(db.Integer, db.ForeignKey('accounts.userID'), nullable=False, on_delete=models.CASCADE)
    textComment = db.column(db.VARChar(), nullable=False)
    postID = db.column(db.Integer, db.ForeignKey(posts.postID), nullable=False, on_delete=models.CASCADE)

    def __init__(self, commentID, commenterID, textComment, postID):
        self.commentID = commentID
        self.commenterID = commenterID
        self.textComment = textComment
        self.postID = postID

class friends(db.Model):
    __tablename__ = 'friends'
    userID = db.column(db.Integer)
    friendID = db.column(db.Integer, db.ForeignKey('accounts.userID'), nullable=False, on_delete=models.CASCADE)

    def __init__(self, userID, friendID):
        self.userID = userID
        self.friendID = friendID

class message(db.Model):
    __tablename__ = 'message'
    msgID = db.column(db.Integer, primary_key=True)
    senderID = db.column(db.Integer, nullable=False)
    receiverID = db.column(db.Integer, nullable=False)
    msg = db.column(db.VARCHAR, nullable=False)

    def __init__(self, msgID, senderID, receiverID, msg):
        self.msgID = msgID
        self.senderID = senderID
        self.receiverID = receiverID
        self.msg = msg
